from aiogram import Dispatcher
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
import re

from keyboards.admin_keyboard import get_adm_keyboard, get_wor_keyboard
from keyboards.user_keyboard import get_user_keyboard
from handlers.db import db
from handlers.get_current_balance import get_current_balance

from inaam_bot_logger import logger

def register_start_handler(dp: Dispatcher):
    @dp.message(CommandStart())
    async def start(message: Message):
        try:
            await message.delete()

            row_main = await db.fetchrow('SELECT 1 FROM main_admin_ids WHERE id=$1', message.from_user.id)
            row_worker = await db.fetchrow('SELECT 1 FROM worker_ids WHERE id=$1', message.from_user.id)

            position = (
                "<i>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å</i> üë®‚Äçüíº" if row_main else
                "<i>–†–∞–±–æ—Ç–Ω–∏–∫</i> üë®‚Äçüíª" if row_worker else
                None
            )

            if position != None:
                if row_main:
                    keyboard = get_adm_keyboard()
                elif row_worker:
                    keyboard = get_wor_keyboard()

                logger.info(f"[{message.from_user.id}] {message.from_user.first_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ [–†–æ–ª—å: {re.sub(r"</?i>", "", position)}]")

                current_balance = await get_current_balance()

                await message.answer(
                    f"<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}</b> üëã\n<b>–†–æ–ª—å:</b> {position}\nüí∏ <b>–ë–∞–ª–∞–Ω—Å:</b> <i>{current_balance}‚ÇΩ</i>",
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )

            else:
                logger.info(f"[{message.from_user.id}] {message.from_user.first_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ [–†–æ–ª—å: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üôé‚Äç‚ôÇÔ∏è]")

                keyboard_user = get_user_keyboard()

                await message.answer(
                    f"<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}</b> üëã",
                    reply_markup=keyboard_user,
                    parse_mode=ParseMode.HTML
                )
        except Exception as e:
            logger.exception(f"[{message.from_user.id}] –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start [command_start.py] [{e}]")
            await message.answer("‚ö†Ô∏è <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>", parse_mode=ParseMode.HTML)