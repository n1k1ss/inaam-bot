from aiogram import Dispatcher, Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile
from aiogram.types import WebAppInfo, CopyTextButton
from aiogram.exceptions import TelegramBadRequest

from handlers.get_date import get_datetime
from handlers.db import db
from handlers.generate_excel import export_to_excel
from handlers.only_admin import only_admin_access
from handlers.get_current_balance import get_current_balance
from inaam_bot_logger import logger

class Form(StatesGroup):
    adding_price_waiting = State()
    removing_price_waiting = State()
    expense_amount_waiting = State()

def get_adm_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìà üí∞", callback_data="incr_balance"),
            InlineKeyboardButton(text="üìâ üí∞", callback_data="decr_balance")
        ],
        [
            InlineKeyboardButton(text="Excel üìÑ (–º–µ—Å—è—Ü)", callback_data="download_excel_month"),
            InlineKeyboardButton(text="Excel üìÑ (1/4 –≥–æ–¥–∞)", callback_data="download_excel_quarter")
        ],
        [
            InlineKeyboardButton(text="Excel üìÑ (1/2 –≥–æ–¥–∞)", callback_data="download_excel_half"),
            InlineKeyboardButton(text="Excel üìÑ (–≥–æ–¥)", callback_data="download_excel_year")
        ]
    ])

def get_wor_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–¢—Ä–∞—Ç—ã üí∏", callback_data="expenses"),
            InlineKeyboardButton(text="üîÑ", callback_data="refresh_balance")
        ]
    ])

def get_website_link_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–∞–π—Ç üåê", web_app=WebAppInfo(url="https://inaam.ru"))
        ],
        [
            InlineKeyboardButton(text="–ü–æ—á—Ç–∞ üì®", copy_text=CopyTextButton(text="info@inaam.ru")),
            InlineKeyboardButton(text="–¢–µ–ª–µ—Ñ–æ–Ω üìû", copy_text=CopyTextButton(text="+79852320202"))
        ],
        [
            InlineKeyboardButton(text="Telegram üí¨", url="t.me/oleynik_INAAM")
        ]
    ])

def get_confirm_adm_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞ ‚úÖ", callback_data="add_balance_yes"),
            InlineKeyboardButton(text="–ù–µ—Ç ‚ùå", callback_data="add_balance_no")
        ]
    ])

def get_confirm_expense_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞ ‚úÖ", callback_data="c_expense"),
            InlineKeyboardButton(text="–ù–µ—Ç ‚ùå", callback_data="r_expense")
        ]
    ])

def get_confirm_adding_new_main_adm(user_id) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ", callback_data=f"c_main#{user_id}"),
            InlineKeyboardButton(text="‚ùå", callback_data=f"r_main#{user_id}")
        ]
    ])

def get_confirm_adding_new_wor(user_id) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ", callback_data=f"c_work#{user_id}"),
            InlineKeyboardButton(text="‚ùå", callback_data=f"r_work#{user_id}")
        ]
    ])

def get_expenses_type() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç üöå", callback_data="exp-transport"),
            InlineKeyboardButton(text="...", callback_data="exp-extra")
        ]
    ])

async def handle_excel_export(call: CallbackQuery, period: str):
    loading = await call.message.answer("<b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞...</b> ‚è≥", parse_mode=ParseMode.HTML)
    output = await export_to_excel(period)
    if output:
        file = BufferedInputFile(output.read(), filename=f"inaam expenses {period}.xlsx")
        await call.message.answer_document(file)
        await loading.edit_text("<b>–ì–æ—Ç–æ–≤–æ</b> ‚úÖ", parse_mode=ParseMode.HTML)
    else:
        await loading.edit_text("<b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</b> üìÇ", parse_mode=ParseMode.HTML)



def register_adm_callbacks(dp: Dispatcher, bot: Bot):
    @dp.callback_query()
    @only_admin_access(db, "both")
    async def callback(call: CallbackQuery, state: FSMContext):
        if call.data == "incr_balance":
            await call.message.edit_text(
                "<b>–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –±–∞–ª–∞–Ω—Å?</b> üí∞üìà",
                parse_mode=ParseMode.HTML)

            await state.set_state(Form.adding_price_waiting)

        if call.data == "decr_balance":
            await call.message.edit_text(
                "<b>–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –±–∞–ª–∞–Ω—Å?</b> üí∞üìâ",
                parse_mode=ParseMode.HTML)

            await state.set_state(Form.removing_price_waiting)

        if call.data == "add_balance_yes" and (await state.get_data()).get("adding_balance_amount") is not None:
            try:
                price_to_add = (await state.get_data()).get("adding_balance_amount")
                current_balance = await get_current_balance()

                logger.warning(f"[{call.from_user.id}] –ü—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ [{call.from_user.first_name}] [{price_to_add}‚ÇΩ] [{current_balance}‚ÇΩ -> {current_balance + price_to_add}‚ÇΩ]")

                await state.clear()

                await db.execute('UPDATE balance SET amount = amount + $1', price_to_add)
                await call.message.edit_text("<b>–î–æ–±–∞–≤–ª–µ–Ω–æ</b> üí∞‚úÖ\n/start", parse_mode=ParseMode.HTML)
            except Exception as e:
                logger.exception(f"[{call.from_user.id}] –û—à–∏–±–∫–∞ –≤ callback [add_balance_yes (admin_keyboard.py)] [{e}]")
                await call.message.answer("‚ö†Ô∏è <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>", parse_mode=ParseMode.HTML)

        if call.data == "add_balance_no":
            await state.clear()
            await call.message.edit_text(
                "<b>–û—Ç–º–µ–Ω–µ–Ω–æ</b> ‚ùå",
                parse_mode=ParseMode.HTML
            )

        if call.data == "c_expense" and (await state.get_data()).get("expense_amount") is not None and (await state.get_data()).get("expense_type") is not None:
            try:
                day = await get_datetime("day")
                month = await get_datetime("month")
                year = await get_datetime("year")
                amount = (await state.get_data()).get("expense_amount")
                type = (await state.get_data()).get("expense_type")

                logger.warning(f"[{call.from_user.id}] –ù–æ–≤–∞—è —Ç—Ä–∞—Ç–∞ [{call.from_user.first_name}] [{type}] [{amount}‚ÇΩ]")

                await db.execute('INSERT INTO balance_expenses (doer, doer_username, section, day, month, year, amount) VALUES ($1, $2, $3, $4, $5, $6, $7)', call.from_user.first_name, call.from_user.username, type, day, month, year, amount)
                await db.execute('UPDATE balance SET amount = amount - $1', amount)
                await call.message.edit_text("<b>–î–æ–±–∞–≤–ª–µ–Ω–æ</b> üí∞‚úÖ\n/start", parse_mode=ParseMode.HTML)
                await state.clear()
            except Exception as e:
                logger.exception(f"[{call.from_user.id}] –û—à–∏–±–∫–∞ –≤ callback [c_expense (admin_keyboard.py)] [{e}]")
                await call.message.answer("‚ö†Ô∏è <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>", parse_mode=ParseMode.HTML)

        if call.data == "r_expense":
            await state.clear()
            await call.message.edit_text(
                "<b>–û—Ç–º–µ–Ω–µ–Ω–æ</b> ‚ùå",
                parse_mode=ParseMode.HTML
            )

        if call.data.startswith("download_excel_"):
            period = call.data.split("_")[-1]
            logger.warning(f"[{call.from_user.id}] –°–∫–∞—á–∞–Ω —Ñ–∞–π–ª Excel [{period}]")
            await handle_excel_export(call, period)

        if call.data == "expenses":
            await call.message.edit_text("<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:</b> üè∑", parse_mode=ParseMode.HTML, reply_markup=get_expenses_type())

        if call.data == "refresh_balance":
            try:
                current_balance = await get_current_balance
                
                await call.message.edit_text(f"<b>–ü—Ä–∏–≤–µ—Ç, {call.from_user.first_name}</b> üëã\n<b>–†–æ–ª—å:</b> <i>–†–∞–±–æ—Ç–Ω–∏–∫</i> üë®‚Äçüíª\nüí∏ <b>–ë–∞–ª–∞–Ω—Å:</b> <i>{current_balance}‚ÇΩ</i>", parse_mode=ParseMode.HTML, reply_markup=call.message.reply_markup)
            except TelegramBadRequest as e:
                if "message is not modified" in e.message.lower():
                    await call.answer("–ë–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è üí∞", show_alert=True)

            except Exception as e:
                logger.exception(f"[{call.from_user.id}] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ [admin_keyboard.py] [{e}]")
                await call.message.answer("‚ö†Ô∏è <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>", parse_mode=ParseMode.HTML)

        if call.data == "exp-transport":
            await call.message.edit_text("<b>–¢–∏–ø:</b> <b>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</b> üöå\n<i>–°–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏?</i>", parse_mode=ParseMode.HTML)
            await state.update_data(expense_type="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
            await state.set_state(Form.expense_amount_waiting)

        if call.data == "exp-extra":
            await call.message.edit_text("<b>–¢–∏–ø:</b> <b>...</b>\n<i>–°–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏?</i>", parse_mode=ParseMode.HTML)
            await state.update_data(expense_type="Extra")
            await state.set_state(Form.expense_amount_waiting)

        if call.data.startswith("c_main#"):
            try:
                user_id = int(call.data.split("#")[1])
                person = await db.fetchrow('SELECT 1 FROM main_admin_ids WHERE id=$1', user_id)
                if not person:
                    logger.warning(f"[{call.from_user.id} -> {user_id}] –ù–æ–≤–∞—è —Ä–æ–ª—å [–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üë®‚Äçüíº]")
                    await db.execute('DELETE FROM worker_ids WHERE id=$1', user_id)
                    await db.execute('INSERT INTO main_admin_ids (id) VALUES ($1) ON CONFLICT DO NOTHING', user_id)
                    await call.message.edit_caption(caption="<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b> ‚úÖ", parse_mode=ParseMode.HTML)
                    await bot.send_message(user_id, "<b>–í–∞—à–∞ —Ä–æ–ª—å –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b> üë§\n/start", parse_mode=ParseMode.HTML)
                else:
                    await call.message.edit_caption(caption="<b>–ß–µ–ª–æ–≤–µ–∫ –∏ —Ç–∞–∫ —É–∂–µ –∞–¥–º–∏–Ω</b> ‚ùå", parse_mode=ParseMode.HTML)
            except Exception as e:
                logger.exception(f"[{call.from_user.id}] –û—à–∏–±–∫–∞ –≤ callback [c_main#... (admin_keyboard.py)] [{e}]")
                await call.message.answer("‚ö†Ô∏è <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>", parse_mode=ParseMode.HTML)

        if call.data.startswith("r_main#"):
            user_id = int(call.data.split("#")[1])
            await bot.send_message(user_id, "<b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b> ‚ùå\n<b>–†–æ–ª—å:</b> <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</i> üë®‚Äçüíº", parse_mode=ParseMode.HTML)
            await call.message.edit_caption(caption="<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b> ‚ùå", parse_mode=ParseMode.HTML)

        if call.data.startswith("c_work#"):
            try:
                user_id = int(call.data.split("#")[1])
                person = await db.fetchrow('SELECT 1 FROM worker_ids WHERE id=$1', user_id)
                if not person:
                    logger.warning(f"[{call.from_user.id} -> {user_id}] –ù–æ–≤–∞—è —Ä–æ–ª—å [–†–∞–±–æ—Ç–Ω–∏–∫ üë®‚Äçüíº]")
                    await db.execute('DELETE FROM main_admin_ids WHERE id=$1', user_id)
                    await db.execute('INSERT INTO worker_ids (id) VALUES ($1) ON CONFLICT DO NOTHING', user_id)
                    await call.message.edit_caption(caption="<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b> ‚úÖ", parse_mode=ParseMode.HTML)
                    await bot.send_message(user_id, "<b>–í–∞—à–∞ —Ä–æ–ª—å –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b> üë§\n/start", parse_mode=ParseMode.HTML)
                else:
                    await call.message.edit_caption(caption="<b>–ß–µ–ª–æ–≤–µ–∫ –∏ —Ç–∞–∫ —É–∂–µ —Ä–∞–±–æ—Ç–Ω–∏–∫</b> ‚ùå", parse_mode=ParseMode.HTML)
            except Exception as e:
                logger.exception(f"[{call.from_user.id}] –û—à–∏–±–∫–∞ –≤ callback [c_work#... (admin_keyboard.py)] [{e}]")
                await call.message.answer("‚ö†Ô∏è <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>", parse_mode=ParseMode.HTML)

        if call.data.startswith("r_work#"):
            user_id = int(call.data.split("#")[1])
            await bot.send_message(user_id, "<b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b> ‚ùå\n<b>–†–æ–ª—å:</b> <i>–†–∞–±–æ—Ç–Ω–∏–∫</i> üë®‚Äçüíª", parse_mode=ParseMode.HTML)
            await call.message.edit_caption(caption="<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b> ‚ùå", parse_mode=ParseMode.HTML)

        await call.answer()

    @dp.message(Form.adding_price_waiting)
    async def adding_price_process(message: Message, state: FSMContext):
        try:
            price = message.text
            await message.delete()
            if price.isdigit():
                price = int(price)
                await state.update_data(adding_balance_amount=price)

                await message.answer(
                    f"<b>–í—ã –ø–æ–ø–æ–ª–Ω—è–µ—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ {price:,}‚ÇΩ</b> üí∞\n<i>–í–µ—Ä–Ω–æ?</i>",
                    parse_mode=ParseMode.HTML,
                    reply_markup=get_confirm_adm_keyboard()
                    )
            else:
                await message.answer(
                    f"<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!</b> ‚ùå",
                    parse_mode=ParseMode.HTML,
                    )
        except Exception as e:
            logger.exception(f"[{message.from_user.id}] –û—à–∏–±–∫–∞ –≤ FSM [Form.adding_price_waiting (admin_keyboard.py)] [{e}]")
            await message.answer("‚ö†Ô∏è <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>", parse_mode=ParseMode.HTML)

    @dp.message(Form.removing_price_waiting)
    async def removing_price_process(message: Message, state: FSMContext):
        try:
            price = message.text
            await message.delete()
            if price[1:].isdigit() and price[0] == "-":
                price = int(price)
                await state.update_data(adding_balance_amount=price)

                await message.answer(
                    f"<b>–í—ã —É–º–µ–Ω—å—à–∞–µ—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ {price:,}‚ÇΩ</b> üí∞\n<i>–í–µ—Ä–Ω–æ?</i>",
                    parse_mode=ParseMode.HTML,
                    reply_markup=get_confirm_adm_keyboard()
                    )
            else:
                await message.answer(
                    f"<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!</b> ‚ùå",
                    parse_mode=ParseMode.HTML,
                    )
        except Exception as e:
            logger.exception(f"[{message.from_user.id}] –û—à–∏–±–∫–∞ –≤ FSM [Form.removing_price_waiting (admin_keyboard.py)] [{e}]")
            await message.answer("‚ö†Ô∏è <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>", parse_mode=ParseMode.HTML)

    @dp.message(Form.expense_amount_waiting)
    async def expense_amount_process(message: Message, state: FSMContext):
        try:
            await message.delete()
            amount = message.text

            if amount.isdigit():
                amount = int(amount)
                current_balance = await get_current_balance()

                if amount <= current_balance:
                    data = await state.get_data()
                    expense_type = data.get("expense_type")
                    await state.update_data(expense_amount=amount)
                    
                    await message.answer(f"<b>–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ {amount}‚ÇΩ –Ω–∞ {expense_type}</b>\n–í–µ—Ä–Ω–æ?", parse_mode=ParseMode.HTML, reply_markup=get_confirm_expense_keyboard())
                else:
                    await message.answer("<b>–û—à–∏–±–∫–∞!\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!</b> üí∞\n<b>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É!</b> ‚ö†Ô∏è\n/start", parse_mode=ParseMode.HTML)
            else:
                await message.answer(
                    f"<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!</b> ‚ùå",
                    parse_mode=ParseMode.HTML,
                    )
        except Exception as e:
            logger.exception(f"[{message.from_user.id}] –û—à–∏–±–∫–∞ –≤ FSM [Form.expense_amount_waiting (admin_keyboard.py)] [{e}]")
            await message.answer("‚ö†Ô∏è <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>", parse_mode=ParseMode.HTML)